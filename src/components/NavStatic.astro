---
import { getCollection } from "astro:content";
import type { CollectionEntry } from "astro:content";
import Book from "@/components/Book.astro";
import Home from "@/components/Home.astro"
import Chart from "@/components/Chart.astro"
import NavItem from "@/components/Nav/Item.astro"
import NavLangPicker from "@/components/Nav/LangPicker.astro"
import NavLink from "@/components/Nav/Link.astro";
import NavTitle from "./Nav/Title.astro";
import type { CollectionKey } from "astro:content";
import type { AstroGlobal } from "astro";
import getTranslations from "@/utils/getTranslations"

interface Props {
}

const pages = await getCollection("pages");
const posts = await getCollection("blog");

const [, currentLang, ...slug] = Astro.url.pathname.split("/");
const langs = [...new Set(pages.map(({ slug }) => slug.split("/")[0]))];


function getLanguageFlags(collection: CollectionEntry<"pages">[]) {
  return collection.reduce<Record<string, string>>((flags, { slug, data }) => {
    flags[slug] = data["global.flag"];
    return flags;
  }, {});
}

let thisPostSlug: string
const flags = getLanguageFlags(pages);

function getTranslatedSlugs(posts: CollectionEntry<"blog">[]) {
  const postType = posts.find(post => {
    const thisPath = Astro.url.pathname.split("/").filter(e=>e).at(-1)
    return post.data.path == thisPath
  })

  const postId = postType?.id.split("/").at(-1) || ""
  thisPostSlug = postId

  return posts.reduce<Record<string, string>>((links, post, i) => {
    if (!post.id.includes(postId)) {
      return links
    }

    const [lang] = post.slug.split("/");
    links[lang] = post.data.path;
    return links;
  }, {});
}

const translatedSlugs = getTranslatedSlugs(posts);
const isBlog = slug.includes("blog");
const withBlog = isBlog ? "blog/" : ""


const getBlog = async (astro: AstroGlobal) => {
  const [, currentLang, ...slug] = astro.url.pathname.split("/");
  const blog = await getCollection("blog")
  return blog.filter(post => post.slug.includes(currentLang)).map(post => ({...post, href: addBlogToSlug(post)}))
}

const getCurrentLang = async (astro: AstroGlobal) => {
  const [, currentLang, ...slug] = astro.url.pathname.split("/");
  return currentLang
}

// const getTranslations = async (astro: AstroGlobal) => {
//   const [, currentLang, ...slug] = astro.url.pathname.split("/");
//   const pages = await getCollection("pages");
//   return pages.find(page => page.slug == currentLang)!.data
// }

const t = await getTranslations(Astro)

const blog = await getBlog(Astro);

function addBlogToSlug(post: CollectionEntry<"blog">): string {
  const [lang] = post.slug.split("/")
  return ["", lang, "blog", post.data.path].join("/")
}

const availableFlags = langs.filter(lang => {
      if (lang in translatedSlugs) {
        if (lang == currentLang) return
        return lang
      }
      else {
        console.error(`Falta traduccion de *${lang}* en ${thisPostSlug}`)
        return 
      }
    })
---

<nav class="fixed flex bottom-0 w-full lg:left-0 lg:flex-col lg:h-screen lg:w-auto lg:border-t-0 z-50">
  <NavItem title="Blog">
    <Book slot="icon"/>
    <NavTitle title={"Blog"}/>
    {blog.map(post => <NavLink href={post.href}>{post.data.h1}</NavLink>)}
  </NavItem>

  <NavItem title={t["nav.components"]}>
    <Chart slot="icon"/>
    <NavTitle title={t["nav.components"]}/>
    {blog.map(post => <NavLink href={post.href}>{post.data.h1}</NavLink>)}
  </NavItem>

  <a href={`/${currentLang}/`} title="home" class="hover:bg-white/30 grayscale hover:grayscale-0 transition-all">
    <div class="flex p-4 justify-center items-center mt-0 h-full lg:h-auto">
      <Home/>
    </div>
  </a>

  <div class="w-full bg-[#141418] h-full absolute -z-[1] border-white/40 max-lg:border-t lg:border-r"></div>
  <div class="w-full bg-[#141418] h-full  -z-[1] border-white/40 max-lg:border-t lg:border-r"></div>


  <NavItem relative fit row right color title={t["nav.changeLanguage"]} enabled={availableFlags.length}>
    <NavLangPicker slot="icon"/>
    {availableFlags.map((lang) => {
      return (
        <NavLink 
          classes="flex px-4 py-4"
          href={`/${lang}/${withBlog}${isBlog ? translatedSlugs[lang] : slug.join("/")}`}>
          <span class={`fi fi-${flags[lang]} rounded-sm`} style="aspect-ratio: 4/3; width: 2rem;"/>
        </NavLink>
      )
    })}
  </NavItem>
</nav>

<script>
  document.addEventListener("mouseup", (event) => {
    const target = event.target as HTMLElement;
    if (target.tagName == "A" || target.tagName == "SPAN") return
    const t = target.closest("label")?.children[1]
    if (t) {
      let radio = t as HTMLInputElement
      if (radio.checked) setTimeout(() => radio.checked = false, 0)
    } else {
      document.querySelectorAll('input[name="nav-item"]').forEach((input) => {
        (input as HTMLInputElement).checked = false;
      });
    }
  });
</script>


<style>
  nav {
    /* position: fixed !important;  */
    /* bottom: 0; */
  }
</style>
